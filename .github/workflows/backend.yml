name: Backend CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Docker Image to ECR
      run: |
        cd backend
        docker build -t cicd-backend .
        docker tag cicd-backend:latest ${{ steps.login-ecr.outputs.registry }}/cicd-backend:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/cicd-backend:latest

    - name: Deploy to EC2
      run: |
        echo "$EC2_SSH_KEY" > private_key.pem
        chmod 400 private_key.pem

        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@54.204.165.103 << 'EOF'
          echo "ðŸ§¹ Cleaning up previous deployments..."
          # Stop and remove any container named 'backend'
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq '^backend$'; then
            echo "Stopping and removing existing container named 'backend'..."
            sudo docker rm -f backend
          fi

          # Kill any process using port 3000
          PID=\$(sudo lsof -t -i:3000)
          if [ ! -z "\$PID" ]; then
            echo "Killing process on port 3000: \$PID"
            sudo kill -9 \$PID
          fi

          echo "ðŸ“¦ Pulling and Running Docker Container..."
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/cicd-backend:latest
          sudo docker run -d -p 3000:3000 --name backend ${{ steps.login-ecr.outputs.registry }}/cicd-backend:latest
        EOF
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
